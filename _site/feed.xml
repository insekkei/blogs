<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web前端笔记</title>
    <description>绿螘新醅酒，红泥小火炉。&lt;br&gt;晚来天欲雪，能饮一杯无？
</description>
    <link>http://localhost:4000/blogs/</link>
    <atom:link href="http://localhost:4000/blogs/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 09 Dec 2016 12:56:00 +0800</pubDate>
    <lastBuildDate>Fri, 09 Dec 2016 12:56:00 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>express和webpack配合时启动文件配置</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;项目结构：react-redux-webpack-express-antui&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;client中存放react代码，分为src和build两个目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;server中存放express代码，分为src和build两个目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;client里的ajax请求包装形式为：/request.ajax?path=xxx&lt;!--more--&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;clientserver&quot;&gt;client里请求路径映射到server里的文件：&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import _ from 'lodash';
import fs from 'fs';
import express from 'express';
import xml2js from 'xml2js';
import path from 'path';
import fetch from 'isomorphic-fetch';

import {SERVERCONFIG} from '../config';
const {nodeEnv, isMock, apiDir} = SERVERCONFIG;
const serverPath = '../' + apiDir.replace(/[\\\/]?$/, '/');
let router = express.Router();

function getLocalApi(req, res, apiPath, params) {
    // 获取文件路径
    let file = path.resolve(__dirname, serverPath + apiPath + (isMock ? '-mock.js' : '.js'));

    // 判断文件是否存在，若文件不存在返回错误
    let isExist = fs.existsSync(file);
    if (!isExist) {
        return {errorCode: 500, message: 'error in server: invalid API path.', data: null};
    }

    // 如果文件存在，返回请求到的数据
    let result = require(file);
    let resp = _.isPlainObject(result)
        ? new Promise(function (resolve) { resolve(result); })
        : result(req, res, apiPath, params);
    return resp;
}

router.all('/request.ajax*', function (req, res, next) {
    // 解析出path
    let body = req.body;
    let path = body.path || req.query.path;
    if (!path) {
        return res.json({errorCode: 500, message: 'error in server: empty API path.', data: null});
    }

    // 解析出参数
    let params = typeof body.params === 'string' ? JSON.parse(body.params) : body.params;

    // 获取对应文件的数据
    getLocalApi(req, res, path, params).then(function (result) {
        console.log('=================response result================');
        console.log(result);
        res.json(result);
    });

    // 设置超时
    // 设置所有HTTP请求的超时时间
    req.setTimeout(20000);
    // 设置所有HTTP请求的服务器响应超时时间
    res.setTimeout(20000);
});

export default router;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;express-&quot;&gt;express 启动文件配置&lt;/h2&gt;

&lt;p&gt;express作为server时，webpack只需要负责编译就好了，辣么，单页应用中必然会出现刷新404的情形，怎么破？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * @file express server
 * @author hancong05@baidu.com
 * @date 2016-10-29
 */

'use strict';

// 非production环境里可以使用express-session来存储用户名等信息，但生产环境下不允许，可以用cookie-session或者Redis之类的方案代替它
import cookieSession from 'cookie-session';
import express from 'express';
import path from 'path';
// express接收到浏览器里传过来的的req.body不能直接拿来用，需要解析成正常的格式
import bodyParser from 'body-parser';
// 专业解决单页应用刷新问题，类似webpack-history-api-callback什么的
import fallback from 'express-history-api-fallback';

// 登录
import loginFilter from './router/loginFilter';
// 退出登录
import logout from './router/logout';
// 这是一个前端请求map后端js文件的方法，按照路径映射到express server层下对应的文件里
import apiMap from './router/apiMap';

import {SERVERCONFIG} from './config';
const {port, nodeEnv, postLimit} = SERVERCONFIG;

let app = express();

// use cookieSession
app.use(cookieSession({
    name: 'posterlab',
    keys: ['userName'],
    // 30 days
    maxAge: 30 * 24 * 60 * 60 * 1000
}));

// login router
app.use(loginFilter);
app.use(logout);
// static files
let root = path.resolve(__dirname, '../../client/build/');
app.use(express.static(root));

// SPA refresh 404 resolution
app.use(fallback('index.html', {root}));


// map request path to api file
app.use(bodyParser.urlencoded({limit: `${postLimit}MB`, extended: true}));
app.use(bodyParser.json({limit: `${postLimit}MB`}));
app.use(apiMap);

// server start
if (!module.parent) {
    app.listen(port, function () {
        console.log('\n Express app listening on port ' + port + '.');
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;serverconfig&quot;&gt;SERVERCONFIG：&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {
    // app server启动配置
    SERVERCONFIG: {
        apiDir: 'api',
        // 后端接口host
        apiBackEndHost: {
            product: 'http://10.94.245.18:8888/ceres/launch/api',
            promote: 'http://10.94.245.18:8889/ceres/show/api',
            preview: 'http://10.94.245.18:8889/ceres/show/api'
        },
        // 是否mock，true时请求${path}-mock.js
        isMock: 0,
        // app port
        port: process.env.NODE_ENV === 'production' ? 8080 : 8886,
        // 开发／生产环境
        nodeEnv: process.env.NODE_ENV || 'dev',
        // 单位：MB
        postLimit: 5
    },
    // UUAP配置
    UUAPCONFIG: {
        production: {
            protocol: 'https',
            hostname: 'uuap.baidu.com',
            validateMethod: '/serviceValidate',
            pathname: '/login',
            logoutMethod: '/logout',
            uicUrl: 'http://uuap.baidu.com:8086/ws/',
            appKey: 'uuapclient-5-1E1FF0L10eb2TthZmAcc'
        },
        dev: {
            protocol: 'http',
            hostname: 'itebeta.baidu.com',
            port: '8100',
            pathname: '/login',
            validateMethod: '/serviceValidate',
            logoutMethod: '/logout',
            uicUrl: 'http://itebeta.baidu.com:8102/ws/',
            appKey: 'UICWSTestKey'
        },
        API: {
            UserRemoteService: 'UserRemoteService?wsdl',
            EmailGroupRemoteService: 'EmailgroupRemoteService?wsdl'
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;babelrc&quot;&gt;.babelrc&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stage-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;import&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;libraryDirectory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;libraryName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;antd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;camel2DashComponentName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;packagejson&quot;&gt;最外层package.json命令：&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
    // 服务启动
    &quot;start&quot;: &quot;nodemon server/src/app.js --ignore client/ --exec babel-node&quot;,
    // client里编译
    &quot;build&quot;: &quot;webpack --watch --config client/webpack-dev-server.config.js&quot;,
    // client里发布
    &quot;release&quot;: &quot;webpack --watch --config client/webpack-production.config.js&quot;,
    // server里编译
    &quot;buildServer&quot;: &quot;babel server/src -d server/build&quot;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 09 Dec 2016 12:16:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/js/express/webpack/2016/12/09/webpack-react-redux-ant-express-common-router-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/js/express/webpack/2016/12/09/webpack-react-redux-ant-express-common-router-config.html</guid>
        
        
        <category>js</category>
        
        <category>express</category>
        
        <category>webpack</category>
        
      </item>
    
      <item>
        <title>charles获取express里的node请求...</title>
        <description>&lt;p&gt;node作为代理层请求后端接口时，一般会封装一个公共的请求方法，配置好host等信息，统一处理后端异常情况。&lt;/p&gt;

&lt;p&gt;这样的话，浏览器里就不能看到真正的api请求地址和原始的返回数据了，而在terminal里打印信息时，往往会被多重请求看得眼花缭乱…&lt;/p&gt;

&lt;p&gt;因此需要charles抓取node里的请求和返回。&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;express里写个fetch方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import fetch from 'isomorphic-fetch';
import tunnel from 'tunnel';
import {SERVERCONFIG} from '../config';
const nodeEnv = process.env.NODE_ENV || 'dev';
...
module.exports = {
    fetchData(req, res, apiPath, params, host) {
        let ext = {};
        params = params || {};

        if (_.isPlainObject(params)) {
            ext = {
                method: 'POST',
                credentials: 'same-origin',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(params)
            };
            // 设置本地调试代理，端口8888
            if (nodeEnv === 'local') {
                ext.agent = tunnel.httpOverHttp({
                    proxy: {
                        host: 'localhost',
                        port: 8888
                    }
                });
            }
        }

        let apiBackEndHost = SERVERCONFIG.apiBackEndHost[host];

        return fetch(apiBackEndHost + apiPath, Object.assign({}, ext)).then(response =&amp;gt; {
            return response.json();
        }).catch(error =&amp;gt; {
            // 统一设置错误处理
            return Promise.resolve({
                status: 505,
                msg: '',
                body: { // 字段没确定
                    error: error
                }
            });
        });
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;开启charles，配置httpProxy为8888，执行：&lt;/p&gt;

&lt;p&gt;NODE_ENV=local npm start&lt;/p&gt;

&lt;p&gt;就可以在charles中看到真正的后端请求和返回了～&lt;/p&gt;

&lt;p&gt;开了shadowSocks这架小飞机怎么办？别怕，SwitchyOmega里配置Protocol为SOCKS5，Server 127.0.0.1，port 1080，
然后在charles的Proxies里选中Enable Socks proxy，设置端口1080.&lt;/p&gt;

&lt;p&gt;备注：此时可以前往mac-&amp;gt;system preference-&amp;gt;network-&amp;gt;advanced-&amp;gt;Proxies中查看web Proxy什么的，是不是被设置了什么端口～～&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Dec 2016 12:16:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/js/express/charles/2016/12/09/express-charles-get-request.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/js/express/charles/2016/12/09/express-charles-get-request.html</guid>
        
        
        <category>js</category>
        
        <category>express</category>
        
        <category>charles</category>
        
      </item>
    
      <item>
        <title>图片上传时可能遇到的一些情况...</title>
        <description>&lt;h2 id=&quot;component&quot;&gt;component&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;input type=&quot;file&quot; accept=&quot;image/png, image/jpeg, image/jpg&quot;
    title=&quot;&quot;
    onChange={this.handleReUpload} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;类型、大小（体积）&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;event.target.files[0]: {
	type, size
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此时也可以同时在express里对上传文件大小进行限制&lt;/p&gt;

&lt;h2 id=&quot;base64--more--&quot;&gt;图片转换成base64&lt;!--more--&gt;&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;inputTypeFileChangeHandler = event =&amp;gt; {
    let me = this;
    let reader = new FileReader();
    // onload() 当读取操作成功完成时调用
    reader.onload = function () {
        // reader.result 读取到的文件内容.这个属性只在读取操作完成之后才有效,并且数据的格式取决于读取操作是由哪个方法发起的
        me.setState({
            imageUrl: reader.result
        });
    }
    if (event.target.files[0]) {
        // readAsDataURL()开始读取指定的Blob对象或File对象中的内容
        reader.readAsDataURL(event.target.files[0]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;base64&quot;&gt;通过base64编码获取图片原始宽高&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let image = new Image();
image.src = reader.result;
let {width, height} = image;
// 校验逻辑
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;inputonchange&quot;&gt;关于上传input的onChange事件&lt;/h2&gt;

&lt;p&gt;连续上传同一张图片时，不会触发onChange事件，解决思路：每次上传完，先销毁组件，再重新render一个组件…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader&quot;&gt;阅读更多&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Dec 2016 12:01:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/js/image/file/2016/12/09/image-upload-relative.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/js/image/file/2016/12/09/image-upload-relative.html</guid>
        
        
        <category>js</category>
        
        <category>image</category>
        
        <category>file</category>
        
      </item>
    
      <item>
        <title>js中的Date另类使用</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;如何获得某个月的天数？&lt;/h2&gt;

&lt;p&gt;方法一&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const EVERY_MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function getDays(year, month) {
    if (month === 1 &amp;amp;&amp;amp; isLeap(year)) return 29;
    return EVERY_MONTH_DAYS[month];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;
&lt;p&gt;方法二&lt;/p&gt;

&lt;p&gt;我们发现，new Date()的第三个参数是可以大于我们所知的每个月的最后一天的的，比如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new Date(2016, 0, 200) //Mon Jul 18 2016 00:00:00 GMT+0800 (CST)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;于是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getDays(year, month) {
    if (month === 1) return new Date(year, month, 29).getMonth() === 1 ? 29 : 28;
    return new Date(year, month, 31).getMonth() === month ? 31 : 30;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;方法三&lt;/p&gt;

&lt;p&gt;new Date()的第三个参数传小于1的值会怎么样了，比如传0，我们就获得了上个月的最后一天。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new Date(2016, 0, -200) //Sun Jun 14 2015 00:00:00 GMT+0800 (CST)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;于是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getDays(year, month) {
    return new Date(year, month + 1, 0).getDate();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;javascript--y-m-d-his-&quot;&gt;JavaScript 显示 Y-m-d H:i:s 的日期时间格式&lt;/h2&gt;

&lt;p&gt;方法一&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let date = new Date();
let result = [
    [
        date.getFullYear(),
        date.getMonth() + 1,
        date.getDate()
    ].join('-'),
    [
        date.getHours(),
        date.getMinutes(),
        date.getSeconds()
    ].join(':')
].join(' ').replace(/\b\d\b/g, '0$&amp;amp;');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;方法二&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new Date().toLocaleString('zh-CN', { hour12: false }) // &quot;2016/8/15 15:41:44&quot;
new Date().toLocaleString('zh-CN', { hour12: true }) // &quot;2016/8/15 下午3:42:06&quot;

var date = new Date();
var result = date.toLocaleString('zh-CN', { hour12: false })
    .replace(/\//g, '-').replace(/\b\d\b/g, '0$&amp;amp;');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 28 Jul 2016 14:02:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/js/date/2016/07/28/date-others.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/js/date/2016/07/28/date-others.html</guid>
        
        
        <category>js</category>
        
        <category>Date</category>
        
      </item>
    
      <item>
        <title>nodejs中使用socket完成长连接</title>
        <description>
</description>
        <pubDate>Wed, 08 Jun 2016 10:37:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/nodejs/socket/2016/06/08/nodejs-socket.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/nodejs/socket/2016/06/08/nodejs-socket.html</guid>
        
        
        <category>nodejs</category>
        
        <category>socket</category>
        
      </item>
    
      <item>
        <title>react和css实现一个高度自适应的textarea</title>
        <description>&lt;p&gt;textarea默认有滚动条，设置height: auto或者固定高度的话，书写体验又不够好；若使用div，设置contentEditable为true，兼容起来比较麻烦，而且这家伙复制粘贴时带着源格式，不好操作。
所以还是想办法使用textarea吧。&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;考虑文字换行等情况，这里使用 &amp;lt;pre&amp;gt; 符号，将textarea的值同步到 &amp;lt;pre&amp;gt; 中，通过这个看不见的 &amp;lt;pre&amp;gt; 盒子的高度自增长，撑高 autoHeight ，然后设置textarea绝对定位，top为0，覆盖&amp;lt;pre&amp;gt;的位置，且高度撑满 autoHeight （100%）。&lt;/p&gt;

&lt;p&gt;js:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
getInitialState() {
    return {
        text: 'react和css实现一个高度自适应的textarea'
    }
},
changeText(e) {
    this.setState({
        text: e.target.value
    });
},
render() {
    return &amp;lt;div className=&quot;autoHeight&quot;&amp;gt;
        &amp;lt;pre&amp;gt;{this.state.text}&amp;lt;/pre&amp;gt;
        &amp;lt;textarea onChange={this.changeText}&amp;gt;&amp;lt;/textarea&amp;gt;
    &amp;lt;/div&amp;gt;;
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;css:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.autoHeight {
    position: relative;

    pre{
        display: block;
        visibility: hidden;
        min-height: 10em;
        padding: 6px 7px; /*需要与textarea保持一致*/
        white-space: pre-wrap;
        line-height: 1.7em;
    }

    textarea {
        resize: none;
        position: absolute;
        height: 100%;
        top: 0;
        line-height: 1.7em;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;理论上，这样就可以实现目的了，但总有点瑕疵——pre和textarea的高度并非完全相等，于是，我将pre的visibility和textarea的top注释掉，对比两个在页面上的表现，发现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pre 每段话是不换行的，横向一撑到底，相当于设置了white-space: no-wrap；&lt;/li&gt;
  &lt;li&gt;pre 每一段（即textarea中的return换行）的段落间距比较大（其实是line-height）；&lt;/li&gt;
  &lt;li&gt;textarea 有预置的padding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是改成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pre{
    display: block;
    visibility: hidden;
    min-height: 10em;
    padding: 6px 7px; /*需要与textarea保持一致*/
    white-space: pre-wrap; /*按照textarea中的内容，该换行换行*/
    line-height: 1.7em; /*需要与textarea保持一致*/
}

textarea {
    resize: none;
    position: absolute;
    height: 100%;
    top: 0;
    line-height: 1.7em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完美。&lt;/p&gt;

&lt;p&gt;于是再一次打开lofter准备写点儿什么时，顺手审查了一下编辑框：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body contenteditable=&quot;true&quot; spellcheck=&quot;false&quot; style=&quot;min-height: 170px;&quot;&amp;gt;&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;难怪全屏写文章时光标经常就失踪了 (;´༎ຶД༎ຶ`) …&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Jun 2016 15:21:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/js/react/css/2016/06/06/css-textarea-autoheight.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/js/react/css/2016/06/06/css-textarea-autoheight.html</guid>
        
        
        <category>js</category>
        
        <category>react</category>
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>nodejs中使用mongodb</title>
        <description>&lt;p&gt;需求背景：线上出问题时可以找出近期数据相关的操作历史，但日志只在内网访问。&lt;/p&gt;

&lt;p&gt;于是可以把日志相关的数据保存在mongodb中。&lt;/p&gt;

&lt;p&gt;yog2的框架中，后端文件结构如下：&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server | - action/api/xx.es
         - lib/dataFetch.es..
         - model | - schema/appfilterlog.es
                   - appfilterlog.es
         - config.es
         - router.es
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先定义表结构，model/schema/appfilterlog.es中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'use strict';

import * as mongoose from 'mongoose';
let logSchema = mongoose.Schema({
    time: Date,
    operate: String,
    operator: String,
    requestData: String
});

let appfilterlog = mongoose.model('appfilterlog', logSchema, 'Appfilterlog');

export default appfilterlog;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;存储数据的方法，在model/appfilterlog.es中，需要保存时间、操作（增加／删除／修改）、操作人、请求数据：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'use strict';

import appfilterlog from './schema/appfilterlog';

export  async function newLog (operate, operator, requestData) {
    appfilterlog.create({
        time: new Date(),
        operate: operate,
        operator: operator,
        requestData: requestData
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在action中调用增加／删除／修改的参数时，也调用newLog的方法，例如action/api/add.es中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import {newLog} from '../../../../../../model/appfilterlog';
...
newLog('add', user.email, JSON.stringify(req.query));
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 26 May 2016 16:37:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/nodejs/mongo/2016/05/26/mongoose-with-nodejs.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/nodejs/mongo/2016/05/26/mongoose-with-nodejs.html</guid>
        
        
        <category>nodejs</category>
        
        <category>mongo</category>
        
      </item>
    
      <item>
        <title>使用css完成一个三维立体旋转相册</title>
        <description>&lt;p&gt;本篇主要通过这个实践练习transform及3D旋转。&lt;/p&gt;

&lt;p&gt;浏览器中，3D旋转时，主要看x轴、y轴、z轴的方向，旋转所绕的轴是一条横线，为x轴旋转，竖线，为y轴旋转，x和y轴都在显示器所在的平面上。z轴则垂直显示器所在的平面。&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;说到3D，必须提到的一个词：透视，也就是perspective，perspective属性定义3D元素距视图的距离，以像素计，定义观察者在z轴上与3D元素的距离（沿着z轴，与浏览器所在面垂直着，向前走，向后走…，越向前，值越小，越“靠近”3D元素，靠近到0时，看不见了！此刻元素在你脑后！越“远离”，值越大，大到一定程度时，也看不见了！此刻元素已经化身为一个点了…），与之配合的一个属性叫做perspective-origin，两个值，分别定义视角在x轴偏离的角度（从左边向右👉看？从正前方看？从右边向左👈看？）和在y轴偏离的角度（从上边👇俯视？从正前方看？从下边👆仰视？）。&lt;/p&gt;

&lt;p&gt;html代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;stage&quot;&amp;gt;
    &amp;lt;div class=&quot;wrapper&quot;&amp;gt;
        &amp;lt;img src=&quot;http://ww1.sinaimg.cn/large/854f1e58jw1exjhap4pg2j21jk1jku0x.jpg&quot;/&amp;gt;
        &amp;lt;img src=&quot;http://ww3.sinaimg.cn/thumb180/854f1e58jw1f3adtzqrgvj21j01j0x26.jpg&quot;/&amp;gt;
        &amp;lt;img src=&quot;http://tupian.aladd.net/2015/7/2748.jpg&quot;/&amp;gt;
        &amp;lt;img src=&quot;http://ww3.sinaimg.cn/bmiddle/89f08a15gw1f3nc7unjq4j20k00k0dhd.jpg&quot;/&amp;gt;
        &amp;lt;img src=&quot;http://tpic.home.news.cn/xhCloudNewsPic/xhpic1501/M04/0D/54/wKhTlFcr1i-EX9ZYAAAAAG2hseo834.jpg&quot;/&amp;gt;
        &amp;lt;img src=&quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcT7Mf-EWjUIFy77lI2zj2bOyTEcF78SS_AYMo6PfFWzYDQsa_9HEg&quot;/&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;stage是整个3D旋转相册的舞台，wrapper是一组相册的包装元素。&lt;/p&gt;

&lt;p&gt;css代码如下，stage需要设置perspective，wrapper要定义transform-style: preserve-3d。&lt;/p&gt;

&lt;p&gt;对于img，首先通过absolute让一组元素重叠起来，然后分别设置旋转角度，六张图片，角度均匀分布的话，每个应该相差60度，此时六个图片仍然重叠在一起，只是各自面向不同的方位，接下来就是一个重要的设置：translateZ。&lt;/p&gt;

&lt;p&gt;当元素面向浏览器（没有rotateX或者Y）时，translateZ的运动垂直于浏览器所在的平面，而设置了旋转之后，z轴会分别垂直于各个元素旋转之后所在的平面，因此，对于不同方向的img，translateZ相当于让它们像花儿开放一样，手拉手，背对背，分散开来～&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    .stage {
        perspective: 800px;
        position: relative;
        height: 400px;
    }
    .wrapper {
        transform-style: preserve-3d;
        height: inherit;
    }
    .wrapper img {
        position: absolute;
        width: 108px;
        height: 108px;
        padding: 10px;
        background: #eee;
        left: 200px;
    }
    .wrapper img:nth-child(1) { transform: rotateY(   0deg ) translateZ(150px); }
    .wrapper img:nth-child(2) { transform: rotateY(  60deg ) translateZ(150px); }
    .wrapper img:nth-child(3) { transform: rotateY( 120deg ) translateZ(150px); }
    .wrapper img:nth-child(4) { transform: rotateY( 180deg ) translateZ(150px); }
    .wrapper img:nth-child(5) { transform: rotateY( 240deg ) translateZ(150px); }
    .wrapper img:nth-child(6) { transform: rotateY( 300deg ) translateZ(150px); }

    @keyframes rotatehaha {
        0% {transform: rotateY(0deg);}
        16% {transform: rotateY(60deg);}
        32% {transform: rotateY(120deg);}
        48% {transform: rotateY(180deg);}
        64% {transform: rotateY(240deg);}
        80% {transform: rotateY(300deg);}
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;over。如果要旋转整个相册，给wrapper元素加上transform: rotateY(${num}deg)就可以。自动旋转的话，可以写个小动画：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.wrapper {
    transform-style: preserve-3d;
    height: inherit;
    animation: rotatehaha 10s infinite;
}

@keyframes rotatehaha {
    0% {transform: rotateY(0deg);}
    16% {transform: rotateY(60deg);}
    32% {transform: rotateY(120deg);}
    48% {transform: rotateY(180deg);}
    64% {transform: rotateY(240deg);}
    80% {transform: rotateY(300deg);}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于上边设置的3D相关的属性，可以在浏览器审查元素中通过上下键改变值的大小，感受全方位360度的视角，加深理解…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/&quot;&gt;阅读更多&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 25 May 2016 10:41:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/css3/2016/05/25/%E4%BD%BF%E7%94%A8css%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%89%E7%BB%B4%E7%AB%8B%E4%BD%93%E6%97%8B%E8%BD%AC%E7%9B%B8%E5%86%8C.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/css3/2016/05/25/%E4%BD%BF%E7%94%A8css%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%89%E7%BB%B4%E7%AB%8B%E4%BD%93%E6%97%8B%E8%BD%AC%E7%9B%B8%E5%86%8C.html</guid>
        
        
        <category>css3</category>
        
      </item>
    
      <item>
        <title>react context传值</title>
        <description>&lt;p&gt;用react-router的时候，希望给{this.props.children}这个组件传一个layout里的用户名…&lt;/p&gt;

&lt;p&gt;Layout.js中：&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const Layout = React.createClass({
    childContextTypes: {
        username: React.PropTypes.string
    },
    getChildContext() {
        return {
            username: this.state.username
        };
    },
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;子组件中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const DateRange = React.createClass({
    contextTypes: {
        username: React.PropTypes.string
    },

    ...
    render() {
        const { username } = this.context;
        return ...
    }
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/docs/context.html&quot;&gt;更多关于context&lt;/a&gt;
&lt;a href=&quot;http://facebook.github.io/react/docs/reusable-components.html&quot;&gt;更多propTypes&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 05 May 2016 17:40:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/react/context/2016/05/05/react-context.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/react/context/2016/05/05/react-context.html</guid>
        
        
        <category>react</category>
        
        <category>context</category>
        
      </item>
    
      <item>
        <title>echarts中需要保持legend的selected状态</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;背景：&lt;/h1&gt;

&lt;p&gt;图表随着时间“自动更新”时，假如deSelect了某一项数据，在下次数据来临、图刷新时，依然deSelect这个数据项。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;思路：&lt;/h1&gt;

&lt;p&gt;在公共的Chart组件中：
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
getInitialState() {
    return {
        selected: {}
    }
},
componentDidUpdate() {
    const el = this.getDOMNode();
    const myChart = echarts.init(el);

    const { selected } = this.state;
    // 如果没有改变select状态，selected将为空
    const ifSelected = this.isEmpty(selected);

    if (ifSelected) {
        myChart.setOption(this.props['data-source']);
    }
    else {
        // 手动设置legend.selected
        this.props['data-source'].legend.selected = selected;
        myChart.setOption(this.props['data-source']);
    }

    const _this = this;
    // echarts添加事件监测
    myChart.on('legendselectchanged', function(obj) {
        var selected = obj.selected;
        var legend = obj.name;
        _this.setState({
            selected: selected
        });
    });
},
isEmpty(obj) {
    for (var name in obj) {
        return false;
    }
    return true;
},
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://echarts.baidu.com/api.html#events&quot;&gt;更多事件API&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Apr 2016 16:57:00 +0800</pubDate>
        <link>http://localhost:4000/blogs/react/js/echarts/2016/04/19/echarts-%E4%BF%AE%E6%94%B9legend%E7%9A%84select%E7%8A%B6%E6%80%81.html</link>
        <guid isPermaLink="true">http://localhost:4000/blogs/react/js/echarts/2016/04/19/echarts-%E4%BF%AE%E6%94%B9legend%E7%9A%84select%E7%8A%B6%E6%80%81.html</guid>
        
        
        <category>react</category>
        
        <category>js</category>
        
        <category>echarts</category>
        
      </item>
    
  </channel>
</rss>
